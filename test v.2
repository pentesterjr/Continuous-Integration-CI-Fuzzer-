import subprocess
import os
import logging

# Global configuration
JENKINS_URL = "jenkins_url"
JOB_NAME = "job_name"
GIT_REPO_PATH = "git_repo_path"

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def validate_commit_hash(commit_hash):
    """Validate the format and length of the commit hash."""
    if len(commit_hash) != 40:
        raise ValueError("Invalid commit hash length.")
    # Add more validation logic if needed

def trigger_fuzzing_job(commit_hash):
    """Trigger fuzzing job in the CI pipeline."""
    try:
        validate_commit_hash(commit_hash)
        subprocess.run(['curl', '-X', 'POST', f'{JENKINS_URL}/job/{JOB_NAME}/buildWithParameters?commit={commit_hash}'])
        logger.info("Fuzzing job triggered successfully.")
    except ValueError as ve:
        logger.error(f"Invalid commit hash: {ve}")
    except Exception as e:
        logger.error(f"Failed to trigger fuzzing job: {e}")

def get_latest_commit_hash():
    """Get the commit hash of the latest code change."""
    try:
        commit_hash = subprocess.check_output(['git', '-C', GIT_REPO_PATH, 'rev-parse', 'HEAD']).decode().strip()
        return commit_hash
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to get commit hash: {e}")
        return None

def main():
    # Get the commit hash of the latest code change
    commit_hash = get_latest_commit_hash()
    if commit_hash:
        # Trigger fuzzing job in the CI pipeline
        trigger_fuzzing_job(commit_hash)

if __name__ == "__main__":
    main()
